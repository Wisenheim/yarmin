# 3 "YarminLexer.mll"
 
  open Lexing
  open YarminParser
  exception Eof
  exception SyntaxError of string

  let next_line lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <-
    {
      pos with pos_bol = lexbuf.lex_curr_pos;
              pos_lnum = pos.pos_lnum + 1;
    }


# 18 "YarminLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\221\255\222\255\223\255\224\255\225\255\226\255\227\255\
    \228\255\229\255\000\000\000\000\001\000\002\000\003\000\003\000\
    \001\000\001\000\000\000\000\000\005\000\002\000\015\000\002\000\
    \007\000\082\000\091\000\253\255\254\255\001\000\003\000\005\000\
    \007\000\252\255\001\000\008\000\010\000\023\000\245\255\009\000\
    \015\000\017\000\033\000\251\255\039\000\043\000\250\255\038\000\
    \048\000\044\000\052\000\249\255\054\000\049\000\057\000\001\000\
    \043\000\235\255\058\000\059\000\248\255\051\000\063\000\247\255\
    \066\000\050\000\246\255\050\000\053\000\237\255\056\000\069\000\
    \244\255\062\000\231\255\243\255\061\000\055\000\058\000\242\255\
    \058\000\054\000\076\000\064\000\068\000\241\255\076\000\080\000\
    \072\000\082\000\076\000\070\000\085\000\236\255\068\000\072\000\
    \240\255\081\000\079\000\092\000\232\255\082\000\234\255\239\255\
    \077\000\238\255\086\000\233\255\096\000\230\255\002\000\244\255\
    \246\255\003\000\162\000\248\255\249\255\250\255\251\255\252\255\
    \253\255\254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\002\000\033\000\255\255\255\255\001\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\008\000\010\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\000\000\
    \255\255\255\255\000\000\255\255\255\255\000\000\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\255\255\000\000\000\000\
    \255\255\000\000\255\255\000\000\255\255\000\000\113\000\000\000\
    \000\000\113\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\030\000\028\000\028\000\030\000\029\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \030\000\000\000\009\000\030\000\112\000\255\255\000\000\000\000\
    \008\000\007\000\000\000\000\000\006\000\026\000\000\000\000\000\
    \027\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\000\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\000\000\012\000\021\000\022\000\000\000\000\000\
    \000\000\015\000\000\000\000\000\013\000\016\000\014\000\017\000\
    \020\000\000\000\010\000\019\000\000\000\000\000\011\000\000\000\
    \000\000\000\000\000\000\005\000\000\000\004\000\114\000\255\255\
    \000\000\106\000\104\000\034\000\056\000\108\000\023\000\101\000\
    \094\000\080\000\076\000\058\000\033\000\035\000\071\000\033\000\
    \070\000\040\000\095\000\075\000\024\000\064\000\081\000\061\000\
    \041\000\031\000\032\000\036\000\052\000\047\000\044\000\042\000\
    \038\000\037\000\039\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\043\000\045\000\046\000\
    \048\000\049\000\050\000\051\000\053\000\054\000\055\000\057\000\
    \059\000\060\000\062\000\063\000\065\000\067\000\068\000\069\000\
    \073\000\072\000\074\000\077\000\078\000\079\000\086\000\066\000\
    \082\000\083\000\084\000\085\000\087\000\088\000\089\000\090\000\
    \091\000\092\000\093\000\097\000\096\000\098\000\099\000\100\000\
    \103\000\105\000\107\000\109\000\121\000\000\000\102\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\122\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\120\000\000\000\
    \001\000\000\000\111\000\255\255\119\000\000\000\000\000\000\000\
    \118\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \117\000\000\000\000\000\000\000\116\000\000\000\115\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\029\000\030\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\030\000\110\000\113\000\255\255\255\255\
    \000\000\000\000\255\255\255\255\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\110\000\113\000\
    \255\255\011\000\012\000\023\000\055\000\010\000\000\000\013\000\
    \014\000\015\000\016\000\021\000\032\000\034\000\018\000\036\000\
    \018\000\022\000\014\000\017\000\000\000\019\000\015\000\020\000\
    \022\000\024\000\031\000\035\000\037\000\039\000\040\000\041\000\
    \022\000\022\000\022\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\042\000\044\000\045\000\
    \047\000\048\000\049\000\050\000\052\000\053\000\054\000\056\000\
    \058\000\059\000\061\000\062\000\064\000\065\000\067\000\068\000\
    \070\000\071\000\073\000\076\000\077\000\078\000\080\000\064\000\
    \081\000\082\000\083\000\084\000\086\000\087\000\088\000\089\000\
    \090\000\091\000\092\000\094\000\095\000\097\000\098\000\099\000\
    \101\000\104\000\106\000\108\000\114\000\255\255\101\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\114\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\114\000\255\255\
    \000\000\255\255\110\000\113\000\114\000\255\255\255\255\255\255\
    \114\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \114\000\255\255\255\255\255\255\114\000\255\255\114\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec read lexbuf =
    __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 31 "YarminLexer.mll"
                 ( read lexbuf)
# 200 "YarminLexer.ml"

  | 1 ->
# 32 "YarminLexer.mll"
                 ( next_line lexbuf; read lexbuf )
# 205 "YarminLexer.ml"

  | 2 ->
# 33 "YarminLexer.mll"
                 ( EINT (int_of_string (Lexing.lexeme lexbuf)) )
# 210 "YarminLexer.ml"

  | 3 ->
# 34 "YarminLexer.mll"
                 ( EBOOL (bool_of_string (Lexing.lexeme lexbuf)) )
# 215 "YarminLexer.ml"

  | 4 ->
# 35 "YarminLexer.mll"
                 ( DEN )
# 220 "YarminLexer.ml"

  | 5 ->
# 36 "YarminLexer.mll"
                 ( DEN )
# 225 "YarminLexer.ml"

  | 6 ->
# 37 "YarminLexer.mll"
                 ( DEN )
# 230 "YarminLexer.ml"

  | 7 ->
# 38 "YarminLexer.mll"
                 ( DIFF )
# 235 "YarminLexer.ml"

  | 8 ->
# 39 "YarminLexer.mll"
                 ( TIMES )
# 240 "YarminLexer.ml"

  | 9 ->
# 40 "YarminLexer.mll"
                 ( SUM )
# 245 "YarminLexer.ml"

  | 10 ->
# 41 "YarminLexer.mll"
                 ( EQUAL )
# 250 "YarminLexer.ml"

  | 11 ->
# 42 "YarminLexer.mll"
                 ( AND )
# 255 "YarminLexer.ml"

  | 12 ->
# 43 "YarminLexer.mll"
                 ( OR )
# 260 "YarminLexer.ml"

  | 13 ->
# 44 "YarminLexer.mll"
                 ( MINUS )
# 265 "YarminLexer.ml"

  | 14 ->
# 45 "YarminLexer.mll"
                 ( ISZERO )
# 270 "YarminLexer.ml"

  | 15 ->
# 46 "YarminLexer.mll"
                 ( NOT )
# 275 "YarminLexer.ml"

  | 16 ->
# 47 "YarminLexer.mll"
                 ( LEN )
# 280 "YarminLexer.ml"

  | 17 ->
# 48 "YarminLexer.mll"
                 ( CAT )
# 285 "YarminLexer.ml"

  | 18 ->
# 49 "YarminLexer.mll"
                 ( SUBSTR )
# 290 "YarminLexer.ml"

  | 19 ->
# 50 "YarminLexer.mll"
                   ( IFTHENELSE )
# 295 "YarminLexer.ml"

  | 20 ->
# 51 "YarminLexer.mll"
                 ( EREFLECT )
# 300 "YarminLexer.ml"

  | 21 ->
# 52 "YarminLexer.mll"
                 ( LET )
# 305 "YarminLexer.ml"

  | 22 ->
# 53 "YarminLexer.mll"
                 ( VAL )
# 310 "YarminLexer.ml"

  | 23 ->
# 54 "YarminLexer.mll"
                 ( NEWLOC )
# 315 "YarminLexer.ml"

  | 24 ->
# 55 "YarminLexer.mll"
                 ( APPL )
# 320 "YarminLexer.ml"

  | 25 ->
# 56 "YarminLexer.mll"
                 ( REC )
# 325 "YarminLexer.ml"

  | 26 ->
# 57 "YarminLexer.mll"
                 ( read_string (Buffer.create 80) lexbuf )
# 330 "YarminLexer.ml"

  | 27 ->
# 58 "YarminLexer.mll"
                 ( LEFT_P )
# 335 "YarminLexer.ml"

  | 28 ->
# 59 "YarminLexer.mll"
                 ( RIGHT_P )
# 340 "YarminLexer.ml"

  | 29 ->
# 60 "YarminLexer.mll"
                 ( COMMA )
# 345 "YarminLexer.ml"

  | 30 ->
# 61 "YarminLexer.mll"
                 ( LEFT_BRACK )
# 350 "YarminLexer.ml"

  | 31 ->
# 62 "YarminLexer.mll"
                 ( RIGHT_BRACK )
# 355 "YarminLexer.ml"

  | 32 ->
# 63 "YarminLexer.mll"
                 ( SEMICOLON )
# 360 "YarminLexer.ml"

  | 33 ->
# 64 "YarminLexer.mll"
                 ( raise (SyntaxError( "Unexpected char: " ^ Lexing.lexeme lexbuf)) )
# 365 "YarminLexer.ml"

  | 34 ->
# 65 "YarminLexer.mll"
                 ( EOF )
# 370 "YarminLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and read_string buf lexbuf =
    __ocaml_lex_read_string_rec buf lexbuf 110
and __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 69 "YarminLexer.mll"
              ( Buffer.add_char buf '/'; read_string buf lexbuf )
# 382 "YarminLexer.ml"

  | 1 ->
# 70 "YarminLexer.mll"
              ( Buffer.add_char buf '\"'; read_string buf lexbuf )
# 387 "YarminLexer.ml"

  | 2 ->
# 71 "YarminLexer.mll"
              ( Buffer.add_char buf '\\'; read_string buf lexbuf )
# 392 "YarminLexer.ml"

  | 3 ->
# 72 "YarminLexer.mll"
              ( Buffer.add_char buf '\b'; read_string buf lexbuf )
# 397 "YarminLexer.ml"

  | 4 ->
# 73 "YarminLexer.mll"
              ( Buffer.add_char buf '\012'; read_string buf lexbuf )
# 402 "YarminLexer.ml"

  | 5 ->
# 74 "YarminLexer.mll"
              ( Buffer.add_char buf '\n'; read_string buf lexbuf )
# 407 "YarminLexer.ml"

  | 6 ->
# 75 "YarminLexer.mll"
              ( Buffer.add_char buf '\r'; read_string buf lexbuf )
# 412 "YarminLexer.ml"

  | 7 ->
# 76 "YarminLexer.mll"
              ( Buffer.add_char buf '\t'; read_string buf lexbuf )
# 417 "YarminLexer.ml"

  | 8 ->
# 78 "YarminLexer.mll"
        ( Buffer.add_string buf (Lexing.lexeme lexbuf);
          read_string buf lexbuf
        )
# 424 "YarminLexer.ml"

  | 9 ->
# 82 "YarminLexer.mll"
              ( ESTRING (Buffer.contents buf) )
# 429 "YarminLexer.ml"

  | 10 ->
# 83 "YarminLexer.mll"
          ( raise (SyntaxError( "Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 434 "YarminLexer.ml"

  | 11 ->
# 84 "YarminLexer.mll"
            ( raise (SyntaxError( "String is not terminated")) )
# 439 "YarminLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state

;;

